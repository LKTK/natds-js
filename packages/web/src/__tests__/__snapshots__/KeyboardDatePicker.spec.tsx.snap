// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`KeyboardDatePicker components should match to snapshot - Opened: KeyboardDatePicker opened snapshot 1`] = `
<Component>
  <Component
    utils={[Function]}
  >
    <WithTheme(ForwardRef)
      label="Only calendar"
      onChange={[Function]}
      value={null}
      variant="dialog"
    >
      <ForwardRef
        label="Only calendar"
        onChange={[Function]}
        value={null}
        variant="dialog"
      >
        <PickerWithState
          allowKeyboardControl={true}
          invalidDateMessage="Invalid Date Format"
          keyboardIcon={
            <ForwardRef(WithTheme)
              name="outlined-action-calendar"
              size="tiny"
            />
          }
          label="Only calendar"
          maxDate={2100-01-01T00:00:00.000Z}
          maxDateMessage="Date should not be after maximal date"
          minDate={1900-01-01T00:00:00.000Z}
          minDateMessage="Date should not be before minimal date"
          onChange={[Function]}
          openTo="date"
          value={null}
          variant="dialog"
          views={
            Array [
              "year",
              "date",
            ]
          }
        >
          <Component
            DateInputProps={
              Object {
                "format": "MMMM do",
                "inputValue": "",
                "onChange": [Function],
                "openPicker": [Function],
                "validationError": "",
              }
            }
            InputComponent={[Function]}
            format="MMMM do"
            keyboardIcon={
              <ForwardRef(WithTheme)
                name="outlined-action-calendar"
                size="tiny"
              />
            }
            label="Only calendar"
            onAccept={[Function]}
            onClear={[Function]}
            onDismiss={[Function]}
            onSetToday={[Function]}
            open={false}
            variant="dialog"
          >
            <Component
              DateInputProps={
                Object {
                  "format": "MMMM do",
                  "inputValue": "",
                  "onChange": [Function],
                  "openPicker": [Function],
                  "validationError": "",
                }
              }
              InputComponent={[Function]}
              cancelLabel="Cancel"
              clearLabel="Clear"
              clearable={false}
              format="MMMM do"
              keyboardIcon={
                <ForwardRef(WithTheme)
                  name="outlined-action-calendar"
                  size="tiny"
                />
              }
              label="Only calendar"
              okLabel="OK"
              onAccept={[Function]}
              onClear={[Function]}
              onDismiss={[Function]}
              onSetToday={[Function]}
              open={false}
              showTodayButton={false}
              todayLabel="Today"
            >
              <Component
                format="MMMM do"
                inputValue=""
                keyboardIcon={
                  <ForwardRef(WithTheme)
                    name="outlined-action-calendar"
                    size="tiny"
                  />
                }
                label="Only calendar"
                onChange={[Function]}
                openPicker={[Function]}
                validationError=""
              >
                <Rifm
                  format={[Function]}
                  key="____ __"
                  onChange={[Function]}
                  refuse={/\\[\\^\\\\d\\]\\+/gi}
                  value=""
                >
                  <WithStyles(ForwardRef(TextField))
                    InputProps={
                      Object {
                        "endAdornment": <ForwardRef(WithStyles)
                          position="end"
                        >
                          <ForwardRef(WithStyles)
                            onClick={[Function]}
                          >
                            <ForwardRef(WithTheme)
                              name="outlined-action-calendar"
                              size="tiny"
                            />
                          </ForwardRef(WithStyles)>
                        </ForwardRef(WithStyles)>,
                      }
                    }
                    error={false}
                    helperText=""
                    label="Only calendar"
                    onChange={[Function]}
                    value=""
                  >
                    <ForwardRef(TextField)
                      InputProps={
                        Object {
                          "endAdornment": <ForwardRef(WithStyles)
                            position="end"
                          >
                            <ForwardRef(WithStyles)
                              onClick={[Function]}
                            >
                              <ForwardRef(WithTheme)
                                name="outlined-action-calendar"
                                size="tiny"
                              />
                            </ForwardRef(WithStyles)>
                          </ForwardRef(WithStyles)>,
                        }
                      }
                      classes={
                        Object {
                          "root": "MuiTextField-root",
                        }
                      }
                      error={false}
                      helperText=""
                      label="Only calendar"
                      onChange={[Function]}
                      value=""
                    >
                      <WithStyles(ForwardRef(FormControl))
                        className="MuiTextField-root"
                        color="primary"
                        disabled={false}
                        error={false}
                        fullWidth={false}
                        required={false}
                        variant="standard"
                      >
                        <ForwardRef(FormControl)
                          className="MuiTextField-root"
                          classes={
                            Object {
                              "fullWidth": "MuiFormControl-fullWidth",
                              "marginDense": "MuiFormControl-marginDense",
                              "marginNormal": "MuiFormControl-marginNormal",
                              "root": "MuiFormControl-root",
                            }
                          }
                          color="primary"
                          disabled={false}
                          error={false}
                          fullWidth={false}
                          required={false}
                          variant="standard"
                        >
                          <div
                            className="MuiFormControl-root MuiTextField-root"
                          >
                            <WithStyles(ForwardRef(InputLabel))>
                              <ForwardRef(InputLabel)
                                classes={
                                  Object {
                                    "animated": "MuiInputLabel-animated",
                                    "asterisk": "MuiInputLabel-asterisk",
                                    "disabled": "Mui-disabled",
                                    "error": "Mui-error",
                                    "filled": "MuiInputLabel-filled",
                                    "focused": "Mui-focused",
                                    "formControl": "MuiInputLabel-formControl",
                                    "marginDense": "MuiInputLabel-marginDense",
                                    "outlined": "MuiInputLabel-outlined",
                                    "required": "Mui-required",
                                    "root": "MuiInputLabel-root",
                                    "shrink": "MuiInputLabel-shrink",
                                  }
                                }
                              >
                                <WithStyles(ForwardRef(FormLabel))
                                  className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
                                  classes={
                                    Object {
                                      "asterisk": "MuiInputLabel-asterisk",
                                      "disabled": "Mui-disabled",
                                      "error": "Mui-error",
                                      "focused": "Mui-focused",
                                      "required": "Mui-required",
                                    }
                                  }
                                  data-shrink={false}
                                >
                                  <ForwardRef(FormLabel)
                                    className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
                                    classes={
                                      Object {
                                        "asterisk": "MuiFormLabel-asterisk MuiInputLabel-asterisk",
                                        "colorSecondary": "MuiFormLabel-colorSecondary",
                                        "disabled": "Mui-disabled Mui-disabled",
                                        "error": "Mui-error Mui-error",
                                        "filled": "MuiFormLabel-filled",
                                        "focused": "Mui-focused Mui-focused",
                                        "required": "Mui-required Mui-required",
                                        "root": "MuiFormLabel-root",
                                      }
                                    }
                                    data-shrink={false}
                                  >
                                    <label
                                      className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
                                      data-shrink={false}
                                    >
                                      Only calendar
                                    </label>
                                  </ForwardRef(FormLabel)>
                                </WithStyles(ForwardRef(FormLabel))>
                              </ForwardRef(InputLabel)>
                            </WithStyles(ForwardRef(InputLabel))>
                            <WithStyles(ForwardRef(Input))
                              autoFocus={false}
                              endAdornment={
                                <ForwardRef(WithStyles)
                                  position="end"
                                >
                                  <ForwardRef(WithStyles)
                                    onClick={[Function]}
                                  >
                                    <ForwardRef(WithTheme)
                                      name="outlined-action-calendar"
                                      size="tiny"
                                    />
                                  </ForwardRef(WithStyles)>
                                </ForwardRef(WithStyles)>
                              }
                              fullWidth={false}
                              multiline={false}
                              onChange={[Function]}
                              value=""
                            >
                              <ForwardRef(Input)
                                autoFocus={false}
                                classes={
                                  Object {
                                    "colorSecondary": "MuiInput-colorSecondary",
                                    "disabled": "Mui-disabled",
                                    "error": "Mui-error",
                                    "focused": "Mui-focused",
                                    "formControl": "MuiInput-formControl",
                                    "fullWidth": "MuiInput-fullWidth",
                                    "input": "MuiInput-input",
                                    "inputMarginDense": "MuiInput-inputMarginDense",
                                    "inputMultiline": "MuiInput-inputMultiline",
                                    "inputTypeSearch": "MuiInput-inputTypeSearch",
                                    "marginDense": "MuiInput-marginDense",
                                    "multiline": "MuiInput-multiline",
                                    "root": "MuiInput-root",
                                    "underline": "MuiInput-underline",
                                  }
                                }
                                endAdornment={
                                  <ForwardRef(WithStyles)
                                    position="end"
                                  >
                                    <ForwardRef(WithStyles)
                                      onClick={[Function]}
                                    >
                                      <ForwardRef(WithTheme)
                                        name="outlined-action-calendar"
                                        size="tiny"
                                      />
                                    </ForwardRef(WithStyles)>
                                  </ForwardRef(WithStyles)>
                                }
                                fullWidth={false}
                                multiline={false}
                                onChange={[Function]}
                                value=""
                              >
                                <WithStyles(ForwardRef(InputBase))
                                  autoFocus={false}
                                  classes={
                                    Object {
                                      "colorSecondary": "MuiInput-colorSecondary",
                                      "disabled": "Mui-disabled",
                                      "error": "Mui-error",
                                      "focused": "Mui-focused",
                                      "formControl": "MuiInput-formControl",
                                      "fullWidth": "MuiInput-fullWidth",
                                      "input": "MuiInput-input",
                                      "inputMarginDense": "MuiInput-inputMarginDense",
                                      "inputMultiline": "MuiInput-inputMultiline",
                                      "inputTypeSearch": "MuiInput-inputTypeSearch",
                                      "marginDense": "MuiInput-marginDense",
                                      "multiline": "MuiInput-multiline",
                                      "root": "MuiInput-root MuiInput-underline",
                                      "underline": null,
                                    }
                                  }
                                  endAdornment={
                                    <ForwardRef(WithStyles)
                                      position="end"
                                    >
                                      <ForwardRef(WithStyles)
                                        onClick={[Function]}
                                      >
                                        <ForwardRef(WithTheme)
                                          name="outlined-action-calendar"
                                          size="tiny"
                                        />
                                      </ForwardRef(WithStyles)>
                                    </ForwardRef(WithStyles)>
                                  }
                                  fullWidth={false}
                                  inputComponent="input"
                                  multiline={false}
                                  onChange={[Function]}
                                  type="text"
                                  value=""
                                >
                                  <ForwardRef(InputBase)
                                    autoFocus={false}
                                    classes={
                                      Object {
                                        "adornedEnd": "MuiInputBase-adornedEnd",
                                        "adornedStart": "MuiInputBase-adornedStart",
                                        "colorSecondary": "MuiInputBase-colorSecondary MuiInput-colorSecondary",
                                        "disabled": "Mui-disabled Mui-disabled",
                                        "error": "Mui-error Mui-error",
                                        "focused": "Mui-focused Mui-focused",
                                        "formControl": "MuiInputBase-formControl MuiInput-formControl",
                                        "fullWidth": "MuiInputBase-fullWidth MuiInput-fullWidth",
                                        "input": "MuiInputBase-input MuiInput-input",
                                        "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
                                        "inputAdornedStart": "MuiInputBase-inputAdornedStart",
                                        "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                                        "inputMarginDense": "MuiInputBase-inputMarginDense MuiInput-inputMarginDense",
                                        "inputMultiline": "MuiInputBase-inputMultiline MuiInput-inputMultiline",
                                        "inputTypeSearch": "MuiInputBase-inputTypeSearch MuiInput-inputTypeSearch",
                                        "marginDense": "MuiInputBase-marginDense MuiInput-marginDense",
                                        "multiline": "MuiInputBase-multiline MuiInput-multiline",
                                        "root": "MuiInputBase-root MuiInput-root MuiInput-underline",
                                      }
                                    }
                                    endAdornment={
                                      <ForwardRef(WithStyles)
                                        position="end"
                                      >
                                        <ForwardRef(WithStyles)
                                          onClick={[Function]}
                                        >
                                          <ForwardRef(WithTheme)
                                            name="outlined-action-calendar"
                                            size="tiny"
                                          />
                                        </ForwardRef(WithStyles)>
                                      </ForwardRef(WithStyles)>
                                    }
                                    fullWidth={false}
                                    inputComponent="input"
                                    multiline={false}
                                    onChange={[Function]}
                                    type="text"
                                    value=""
                                  >
                                    <div
                                      className="MuiInputBase-root MuiInput-root MuiInput-underline MuiInputBase-formControl MuiInput-formControl MuiInputBase-adornedEnd"
                                      onClick={[Function]}
                                    >
                                      <input
                                        aria-invalid={false}
                                        autoFocus={false}
                                        className="MuiInputBase-input MuiInput-input MuiInputBase-inputAdornedEnd"
                                        disabled={false}
                                        onAnimationStart={[Function]}
                                        onBlur={[Function]}
                                        onChange={[Function]}
                                        onFocus={[Function]}
                                        required={false}
                                        type="text"
                                        value=""
                                      />
                                      <WithStyles(ForwardRef(InputAdornment))
                                        position="end"
                                      >
                                        <ForwardRef(InputAdornment)
                                          classes={
                                            Object {
                                              "disablePointerEvents": "MuiInputAdornment-disablePointerEvents",
                                              "filled": "MuiInputAdornment-filled",
                                              "hiddenLabel": "MuiInputAdornment-hiddenLabel",
                                              "marginDense": "MuiInputAdornment-marginDense",
                                              "positionEnd": "MuiInputAdornment-positionEnd",
                                              "positionStart": "MuiInputAdornment-positionStart",
                                              "root": "MuiInputAdornment-root",
                                            }
                                          }
                                          position="end"
                                        >
                                          <div
                                            className="MuiInputAdornment-root MuiInputAdornment-positionEnd"
                                          >
                                            <WithStyles(ForwardRef(IconButton))
                                              onClick={[Function]}
                                            >
                                              <ForwardRef(IconButton)
                                                classes={
                                                  Object {
                                                    "colorInherit": "MuiIconButton-colorInherit",
                                                    "colorPrimary": "MuiIconButton-colorPrimary",
                                                    "colorSecondary": "MuiIconButton-colorSecondary",
                                                    "disabled": "Mui-disabled",
                                                    "edgeEnd": "MuiIconButton-edgeEnd",
                                                    "edgeStart": "MuiIconButton-edgeStart",
                                                    "label": "MuiIconButton-label",
                                                    "root": "MuiIconButton-root",
                                                    "sizeSmall": "MuiIconButton-sizeSmall",
                                                  }
                                                }
                                                onClick={[Function]}
                                              >
                                                <WithStyles(ForwardRef(ButtonBase))
                                                  centerRipple={true}
                                                  className="MuiIconButton-root"
                                                  disabled={false}
                                                  focusRipple={true}
                                                  onClick={[Function]}
                                                >
                                                  <ForwardRef(ButtonBase)
                                                    centerRipple={true}
                                                    className="MuiIconButton-root"
                                                    classes={
                                                      Object {
                                                        "disabled": "Mui-disabled",
                                                        "focusVisible": "Mui-focusVisible",
                                                        "root": "MuiButtonBase-root",
                                                      }
                                                    }
                                                    disabled={false}
                                                    focusRipple={true}
                                                    onClick={[Function]}
                                                  >
                                                    <button
                                                      className="MuiButtonBase-root MuiIconButton-root"
                                                      disabled={false}
                                                      onBlur={[Function]}
                                                      onClick={[Function]}
                                                      onDragLeave={[Function]}
                                                      onFocus={[Function]}
                                                      onKeyDown={[Function]}
                                                      onKeyUp={[Function]}
                                                      onMouseDown={[Function]}
                                                      onMouseLeave={[Function]}
                                                      onMouseUp={[Function]}
                                                      onTouchEnd={[Function]}
                                                      onTouchMove={[Function]}
                                                      onTouchStart={[Function]}
                                                      tabIndex={0}
                                                      type="button"
                                                    >
                                                      <span
                                                        className="MuiIconButton-label"
                                                      >
                                                        <WithTheme(ForwardRef)
                                                          name="outlined-action-calendar"
                                                          size="tiny"
                                                        >
                                                          <ForwardRef
                                                            name="outlined-action-calendar"
                                                            size="tiny"
                                                          >
                                                            <styled.i
                                                              className="natds-icons natds-icons-outlined-action-calendar undefined"
                                                              size="tiny"
                                                            >
                                                              <StyledComponent
                                                                className="natds-icons natds-icons-outlined-action-calendar undefined"
                                                                forwardedComponent={
                                                                  Object {
                                                                    "$$typeof": Symbol(react.forward_ref),
                                                                    "attrs": Array [],
                                                                    "componentStyle": ComponentStyle {
                                                                      "componentId": "sc-bdVaJa",
                                                                      "isStatic": false,
                                                                      "lastClassName": "jWbhAs",
                                                                      "rules": Array [
                                                                        "
  font-size: ",
                                                                        [Function],
                                                                        ";
",
                                                                      ],
                                                                    },
                                                                    "displayName": "styled.i",
                                                                    "foldedComponentIds": Array [],
                                                                    "render": [Function],
                                                                    "styledComponentId": "sc-bdVaJa",
                                                                    "target": "i",
                                                                    "toString": [Function],
                                                                    "warnTooManyClasses": [Function],
                                                                    "withComponent": [Function],
                                                                  }
                                                                }
                                                                forwardedRef={null}
                                                                size="tiny"
                                                              >
                                                                <i
                                                                  className="sc-bdVaJa jWbhAs natds-icons natds-icons-outlined-action-calendar undefined"
                                                                  size="tiny"
                                                                />
                                                              </StyledComponent>
                                                            </styled.i>
                                                          </ForwardRef>
                                                        </WithTheme(ForwardRef)>
                                                      </span>
                                                      <NoSsr>
                                                        <WithStyles(memo)
                                                          center={true}
                                                        >
                                                          <ForwardRef(TouchRipple)
                                                            center={true}
                                                            classes={
                                                              Object {
                                                                "child": "MuiTouchRipple-child",
                                                                "childLeaving": "MuiTouchRipple-childLeaving",
                                                                "childPulsate": "MuiTouchRipple-childPulsate",
                                                                "ripple": "MuiTouchRipple-ripple",
                                                                "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                                "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                                "root": "MuiTouchRipple-root",
                                                              }
                                                            }
                                                          >
                                                            <span
                                                              className="MuiTouchRipple-root"
                                                            >
                                                              <TransitionGroup
                                                                childFactory={[Function]}
                                                                component={null}
                                                                exit={true}
                                                              />
                                                            </span>
                                                          </ForwardRef(TouchRipple)>
                                                        </WithStyles(memo)>
                                                      </NoSsr>
                                                    </button>
                                                  </ForwardRef(ButtonBase)>
                                                </WithStyles(ForwardRef(ButtonBase))>
                                              </ForwardRef(IconButton)>
                                            </WithStyles(ForwardRef(IconButton))>
                                          </div>
                                        </ForwardRef(InputAdornment)>
                                      </WithStyles(ForwardRef(InputAdornment))>
                                    </div>
                                  </ForwardRef(InputBase)>
                                </WithStyles(ForwardRef(InputBase))>
                              </ForwardRef(Input)>
                            </WithStyles(ForwardRef(Input))>
                          </div>
                        </ForwardRef(FormControl)>
                      </WithStyles(ForwardRef(FormControl))>
                    </ForwardRef(TextField)>
                  </WithStyles(ForwardRef(TextField))>
                </Rifm>
              </Component>
              <WithStyles(ModalDialog)
                cancelLabel="Cancel"
                clearLabel="Clear"
                clearable={false}
                okLabel="OK"
                onAccept={[Function]}
                onClear={[Function]}
                onDismiss={[Function]}
                onSetToday={[Function]}
                open={false}
                showTodayButton={false}
                todayLabel="Today"
              >
                <ModalDialog
                  cancelLabel="Cancel"
                  classes={
                    Object {
                      "dialog": "MuiPickersModal-dialog",
                      "dialogRoot": "MuiPickersModal-dialogRoot",
                      "dialogRootWider": "MuiPickersModal-dialogRootWider",
                      "withAdditionalAction": "MuiPickersModal-withAdditionalAction",
                    }
                  }
                  clearLabel="Clear"
                  clearable={false}
                  okLabel="OK"
                  onAccept={[Function]}
                  onClear={[Function]}
                  onDismiss={[Function]}
                  onSetToday={[Function]}
                  open={false}
                  showTodayButton={false}
                  todayLabel="Today"
                >
                  <WithStyles(ForwardRef(Dialog))
                    classes={
                      Object {
                        "paper": "MuiPickersModal-dialogRoot",
                      }
                    }
                    onClose={[Function]}
                    open={false}
                    role="dialog"
                  >
                    <ForwardRef(Dialog)
                      classes={
                        Object {
                          "container": "MuiDialog-container",
                          "paper": "MuiDialog-paper MuiPickersModal-dialogRoot",
                          "paperFullScreen": "MuiDialog-paperFullScreen",
                          "paperFullWidth": "MuiDialog-paperFullWidth",
                          "paperScrollBody": "MuiDialog-paperScrollBody",
                          "paperScrollPaper": "MuiDialog-paperScrollPaper",
                          "paperWidthFalse": "MuiDialog-paperWidthFalse",
                          "paperWidthLg": "MuiDialog-paperWidthLg",
                          "paperWidthMd": "MuiDialog-paperWidthMd",
                          "paperWidthSm": "MuiDialog-paperWidthSm",
                          "paperWidthXl": "MuiDialog-paperWidthXl",
                          "paperWidthXs": "MuiDialog-paperWidthXs",
                          "root": "MuiDialog-root",
                          "scrollBody": "MuiDialog-scrollBody",
                          "scrollPaper": "MuiDialog-scrollPaper",
                        }
                      }
                      onClose={[Function]}
                      open={false}
                      role="dialog"
                    >
                      <ForwardRef(Modal)
                        BackdropComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "Naked": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "propTypes": Object {
                                "children": [Function],
                                "className": [Function],
                                "classes": [Function],
                                "invisible": [Function],
                                "open": [Function],
                                "transitionDuration": [Function],
                              },
                              "render": [Function],
                            },
                            "displayName": "WithStyles(ForwardRef(Backdrop))",
                            "options": Object {
                              "defaultTheme": Object {
                                "breakpoints": Object {
                                  "between": [Function],
                                  "down": [Function],
                                  "keys": Array [
                                    "xs",
                                    "sm",
                                    "md",
                                    "lg",
                                    "xl",
                                  ],
                                  "only": [Function],
                                  "up": [Function],
                                  "values": Object {
                                    "lg": 1280,
                                    "md": 960,
                                    "sm": 600,
                                    "xl": 1920,
                                    "xs": 0,
                                  },
                                  "width": [Function],
                                },
                                "direction": "ltr",
                                "mixins": Object {
                                  "gutters": [Function],
                                  "toolbar": Object {
                                    "@media (min-width:0px) and (orientation: landscape)": Object {
                                      "minHeight": 48,
                                    },
                                    "@media (min-width:600px)": Object {
                                      "minHeight": 64,
                                    },
                                    "minHeight": 56,
                                  },
                                },
                                "overrides": Object {},
                                "palette": Object {
                                  "action": Object {
                                    "active": "rgba(0, 0, 0, 0.54)",
                                    "disabled": "rgba(0, 0, 0, 0.26)",
                                    "disabledBackground": "rgba(0, 0, 0, 0.12)",
                                    "hover": "rgba(0, 0, 0, 0.08)",
                                    "hoverOpacity": 0.08,
                                    "selected": "rgba(0, 0, 0, 0.14)",
                                  },
                                  "augmentColor": [Function],
                                  "background": Object {
                                    "default": "#fafafa",
                                    "paper": "#fff",
                                  },
                                  "common": Object {
                                    "black": "#000",
                                    "white": "#fff",
                                  },
                                  "contrastThreshold": 3,
                                  "divider": "rgba(0, 0, 0, 0.12)",
                                  "error": Object {
                                    "contrastText": "#fff",
                                    "dark": "#d32f2f",
                                    "light": "#e57373",
                                    "main": "#f44336",
                                  },
                                  "getContrastText": [Function],
                                  "grey": Object {
                                    "100": "#f5f5f5",
                                    "200": "#eeeeee",
                                    "300": "#e0e0e0",
                                    "400": "#bdbdbd",
                                    "50": "#fafafa",
                                    "500": "#9e9e9e",
                                    "600": "#757575",
                                    "700": "#616161",
                                    "800": "#424242",
                                    "900": "#212121",
                                    "A100": "#d5d5d5",
                                    "A200": "#aaaaaa",
                                    "A400": "#303030",
                                    "A700": "#616161",
                                  },
                                  "info": Object {
                                    "contrastText": "#fff",
                                    "dark": "#1976d2",
                                    "light": "#64b5f6",
                                    "main": "#2196f3",
                                  },
                                  "primary": Object {
                                    "contrastText": "#fff",
                                    "dark": "#303f9f",
                                    "light": "#7986cb",
                                    "main": "#3f51b5",
                                  },
                                  "secondary": Object {
                                    "contrastText": "#fff",
                                    "dark": "#c51162",
                                    "light": "#ff4081",
                                    "main": "#f50057",
                                  },
                                  "success": Object {
                                    "contrastText": "rgba(0, 0, 0, 0.87)",
                                    "dark": "#388e3c",
                                    "light": "#81c784",
                                    "main": "#4caf50",
                                  },
                                  "text": Object {
                                    "disabled": "rgba(0, 0, 0, 0.38)",
                                    "hint": "rgba(0, 0, 0, 0.38)",
                                    "primary": "rgba(0, 0, 0, 0.87)",
                                    "secondary": "rgba(0, 0, 0, 0.54)",
                                  },
                                  "tonalOffset": 0.2,
                                  "type": "light",
                                  "warning": Object {
                                    "contrastText": "rgba(0, 0, 0, 0.87)",
                                    "dark": "#f57c00",
                                    "light": "#ffb74d",
                                    "main": "#ff9800",
                                  },
                                },
                                "props": Object {},
                                "shadows": Array [
                                  "none",
                                  "0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12)",
                                  "0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)",
                                  "0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12)",
                                  "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
                                  "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
                                  "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
                                  "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
                                  "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
                                  "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
                                  "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
                                  "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
                                  "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
                                  "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
                                  "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
                                  "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
                                  "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
                                  "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
                                  "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
                                  "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
                                  "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
                                  "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
                                  "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
                                  "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
                                  "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
                                ],
                                "shape": Object {
                                  "borderRadius": 4,
                                },
                                "spacing": [Function],
                                "transitions": Object {
                                  "create": [Function],
                                  "duration": Object {
                                    "complex": 375,
                                    "enteringScreen": 225,
                                    "leavingScreen": 195,
                                    "short": 250,
                                    "shorter": 200,
                                    "shortest": 150,
                                    "standard": 300,
                                  },
                                  "easing": Object {
                                    "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
                                    "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
                                    "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
                                    "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
                                  },
                                  "getAutoHeightDuration": [Function],
                                },
                                "typography": Object {
                                  "body1": Object {
                                    "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                    "fontSize": "1rem",
                                    "fontWeight": 400,
                                    "letterSpacing": "0.00938em",
                                    "lineHeight": 1.5,
                                  },
                                  "body2": Object {
                                    "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                    "fontSize": "0.875rem",
                                    "fontWeight": 400,
                                    "letterSpacing": "0.01071em",
                                    "lineHeight": 1.43,
                                  },
                                  "button": Object {
                                    "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                    "fontSize": "0.875rem",
                                    "fontWeight": 500,
                                    "letterSpacing": "0.02857em",
                                    "lineHeight": 1.75,
                                    "textTransform": "uppercase",
                                  },
                                  "caption": Object {
                                    "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                    "fontSize": "0.75rem",
                                    "fontWeight": 400,
                                    "letterSpacing": "0.03333em",
                                    "lineHeight": 1.66,
                                  },
                                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                  "fontSize": 14,
                                  "fontWeightBold": 700,
                                  "fontWeightLight": 300,
                                  "fontWeightMedium": 500,
                                  "fontWeightRegular": 400,
                                  "h1": Object {
                                    "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                    "fontSize": "6rem",
                                    "fontWeight": 300,
                                    "letterSpacing": "-0.01562em",
                                    "lineHeight": 1.167,
                                  },
                                  "h2": Object {
                                    "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                    "fontSize": "3.75rem",
                                    "fontWeight": 300,
                                    "letterSpacing": "-0.00833em",
                                    "lineHeight": 1.2,
                                  },
                                  "h3": Object {
                                    "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                    "fontSize": "3rem",
                                    "fontWeight": 400,
                                    "letterSpacing": "0em",
                                    "lineHeight": 1.167,
                                  },
                                  "h4": Object {
                                    "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                    "fontSize": "2.125rem",
                                    "fontWeight": 400,
                                    "letterSpacing": "0.00735em",
                                    "lineHeight": 1.235,
                                  },
                                  "h5": Object {
                                    "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                    "fontSize": "1.5rem",
                                    "fontWeight": 400,
                                    "letterSpacing": "0em",
                                    "lineHeight": 1.334,
                                  },
                                  "h6": Object {
                                    "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                    "fontSize": "1.25rem",
                                    "fontWeight": 500,
                                    "letterSpacing": "0.0075em",
                                    "lineHeight": 1.6,
                                  },
                                  "htmlFontSize": 16,
                                  "overline": Object {
                                    "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                    "fontSize": "0.75rem",
                                    "fontWeight": 400,
                                    "letterSpacing": "0.08333em",
                                    "lineHeight": 2.66,
                                    "textTransform": "uppercase",
                                  },
                                  "pxToRem": [Function],
                                  "round": [Function],
                                  "subtitle1": Object {
                                    "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                    "fontSize": "1rem",
                                    "fontWeight": 400,
                                    "letterSpacing": "0.00938em",
                                    "lineHeight": 1.75,
                                  },
                                  "subtitle2": Object {
                                    "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                    "fontSize": "0.875rem",
                                    "fontWeight": 500,
                                    "letterSpacing": "0.00714em",
                                    "lineHeight": 1.57,
                                  },
                                },
                                "zIndex": Object {
                                  "appBar": 1100,
                                  "drawer": 1200,
                                  "mobileStepper": 1000,
                                  "modal": 1300,
                                  "snackbar": 1400,
                                  "speedDial": 1050,
                                  "tooltip": 1500,
                                },
                              },
                              "name": "MuiBackdrop",
                            },
                            "propTypes": Object {
                              "classes": [Function],
                              "innerRef": [Function],
                            },
                            "render": [Function],
                            "useStyles": [Function],
                          }
                        }
                        BackdropProps={
                          Object {
                            "transitionDuration": Object {
                              "enter": 225,
                              "exit": 195,
                            },
                          }
                        }
                        className="MuiDialog-root"
                        closeAfterTransition={true}
                        disableBackdropClick={false}
                        disableEscapeKeyDown={false}
                        onClose={[Function]}
                        open={false}
                        role="dialog"
                      />
                    </ForwardRef(Dialog)>
                  </WithStyles(ForwardRef(Dialog))>
                </ModalDialog>
              </WithStyles(ModalDialog)>
            </Component>
          </Component>
        </PickerWithState>
      </ForwardRef>
    </WithTheme(ForwardRef)>
  </Component>
</Component>
`;
